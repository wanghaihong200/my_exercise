spring:
  application:
    name: spring-boot-learning
  mvc:
    pathmatch:
      matching-strategy: ant_path_matcher
  profiles:
    active: dev
  autoconfigure:
    exclude: com.alibaba.druid.spring.boot.autoconfigure.DruidDataSourceAutoConfigure

  servlet:
    multipart:
      # 设置上传文件的大小
      max-file-size: 10MB
      # 设置整个请求的大小
      max-request-size: 15MB

  jackson:
    # 设置属性命名策略,对应jackson下PropertyNamingStrategy中的常量值，SNAKE_CASE-返回的json驼峰式转下划线，json body下划线传到后端自动转驼峰式
    property-naming-strategy: SNAKE_CASE
    # 全局设置@JsonFormat的格式pattern
    date-format: yyyy-MM-dd HH:mm:ss
    # 当地时区
    locale: zh
    # 设置全局时区
    time-zone: GMT+8
    # 常用，全局设置pojo或被@JsonInclude注解的属性的序列化方式
    default-property-inclusion: NON_NULL #不为空的属性才会序列化,具体属性可看JsonInclude.Include
    # 常规默认,枚举类SerializationFeature中的枚举属性为key，值为boolean设置jackson序列化特性,具体key请看SerializationFeature源码
    serialization:
      WRITE_DATES_AS_TIMESTAMPS: true # 返回的java.util.date转换成timestamp
      FAIL_ON_EMPTY_BEANS: true # 对象为空时是否报错，默认true

    # 枚举类DeserializationFeature中的枚举属性为key，值为boolean设置jackson反序列化特性,具体key请看DeserializationFeature源码
    deserialization:
      # 常用,json中含pojo不存在属性时是否失败报错,默认true
      FAIL_ON_UNKNOWN_PROPERTIES: false
      # 默认关闭，当集合Collection或数组一个元素时返回："list":["a"]。开启后，"list":"a"
      ACCEPT_SINGLE_VALUE_AS_ARRAY: true

    # 枚举类MapperFeature中的枚举属性为key，值为boolean设置jackson ObjectMapper特性
    # ObjectMapper在jackson中负责json的读写、json与pojo的互转、json tree的互转,具体特性请看MapperFeature,常规默认即可
    mapper:
      # 使用getter取代setter探测属性，如类中含getName()但不包含name属性与setName()，传输的vo json格式模板中依旧含name属性
      USE_GETTERS_AS_SETTERS: false #默认false
    # 枚举类JsonParser.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonParser特性
    # JsonParser在jackson中负责json内容的读取,具体特性请看JsonParser.Feature，一般无需设置默认即可
    parser:
      ALLOW_SINGLE_QUOTES: false # 是否允许出现单引号,默认false
    # 枚举类JsonGenerator.Feature枚举类中的枚举属性为key，值为boolean设置jackson JsonGenerator特性，一般无需设置默认即可
    # JsonGenerator在jackson中负责编写json内容,具体特性请看JsonGenerator.Feature

  #  数据源配置
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    #   Druid连接池配置
    druid:
      stat-view-servlet:
        enabled: true
        loginUsername: admin
        loginPassword: 123456
        allow:
      web-stat-filter:
        enabled: true

      #   初始化大小，最小，最大
      initial-size: 5
      max-active: 30
      min-idle: 5
      #      获取数据库连接等待的超时时间
      max-wait: 3000
      max-open-prepared-statements: -1
      #      配置多久进行一次检测，检测需要关闭的空闲连接 单位毫秒
      time-between-eviction-runs-millis: 60000
      #      配置连接在池中的最小生存时间
      min-evictable-idle-time-millis: 300000
      #      配置连接在池中的最大生存时间
      max-evictable-idle-time-millis: 400000
      #      系统启动时通过该sql语句验证数据库是否可用，如果不配置validationQuery，则下面三项无效
      validation-query: SELECT 1
      #      启用空闲连接检测，以便回收
      test-while-idle: true
      #      从连接池获取连接时，是否检测连接可用性，开启性能会有些许影响
      test-on-borrow: false
      #      释放连接到连接池时，是否检测连接可用性，开启性能会有些许影响
      test-on-return: false
      #      打开PSCache，并且指定每个连接上PSCache的大小, mysql建议关闭
      pool-prepared-statements: false
      max-pool-prepared-statement-per-connection-size: 20
      #      配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,log4j2
      use-global-data-source-stat: true
      filter:
        stat:
          # 慢SQL记录
          merge-sql: true
          slow-sql-millis: 5000



mybatis-plus:
  mapper-locations: classpath*:/mappers/**/*.xml
  #  实体扫描，多个package用逗号或者分号分隔
  type-aliases-package: com.example.springbootlearn.db.domain
  # 是否执行MyBatis xml配置文件的状态检查, 只是检查状态
  check-config-location: true
  configuration:
    # 下划线转驼峰配置
    map-underscore-to-camel-case: true
    # 开启 MyBatisPlus日志
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#pagehelper:
#  helper-dialect: mysql

logging:
  config: classpath:log4j2.xml

swagger:
  enabled: true


myfile:
  path: D:\java_study\rj-take-out\src\main\resources\upload\